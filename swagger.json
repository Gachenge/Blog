{
  "openapi": "3.0.3",
  "info": {
    "title": "Swagger  - OpenAPI 3.0",
    "description": "Allow new users to be authenticated using either google, github or twitter. Then store the user information in mysql databases. No need to remember multiple passwords",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "gachenge1@gmail.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/api/google/login": {
      "get": {
        "summary": "Login with Google",
        "description": "Redirects to Google login. once login details are entered, it redirects to /callback that receved the google authentications and saves the user to database",
        "responses": {
          "302": {
            "description": "Redirect to Google login page"
          },
          "500": {
            "description": "State does not match"
          }
        }
      }
    },
    "/api/google/logout": {
      "get": {
        "summary": "Logout",
        "description": "Clears the session data.",
        "responses": {
          "302": {
            "description": "Redirect to the index"
          }
        }
      }
    },
    "/api/google": {
      "get": {
        "summary": "Index",
        "description": "Displays available login options.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/google/protected_area": {
      "get": {
        "summary": "Protected Area",
        "description": "Requires login, displays protected content.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/github": {
      "get": {
        "summary": "Login with GitHub",
        "description": "Redirects to GitHub login.",
        "responses": {
          "302": {
            "description": "Redirect to GitHub login page"
          }
        }
      }
    },
    "/api/user/all": {
      "get": {
        "summary": "returns a list of all users in the database",
        "description": "Once a user is authenticated, they are added to the database. This returns a list of all users saved",
        "responses": {
          "200": {
            "description": "returns a list of all users, by id, name and email"
          }
        }
      }
    },
    "/api/user/{user_id}": {
      "get": {
        "summary": "Returns a specific user by their id",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns a specific user by their id"
          }
        }
      },
      "patch": {
        "summary": "Allows an update for a user by their id",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the user"
                  },
                  "email": {
                    "type": "string",
                    "description": "user email"
                  },
                  "avatar": {
                    "type": "string",
                    "description": "url of new image"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "user updated successfully"
          },
          "400": {
            "description": "key is not valid"
          }
        }
      },
      "delete": {
        "summary": "Deletes a user by their id",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user deleted successfully"
          }
        }
      }
    },
    "/api/posts/create": {
      "post": {
        "summary": "create a blog post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The content of the post"
                  },
                  "image_url": {
                    "type": "string",
                    "description": "URL of an image associated with the post"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "post created successfully"
          },
          "400": {
            "description": "post must have a body"
          }
        }
      }
    },
    "/api/posts/{post_id}": {
      "get": {
        "summary": "Returns a particular post by id",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get a particular user by id"
          },
          "404": {
            "description": "post not found"
          }
        }
      },
      "patch": {
        "summary": "update details for a post",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The content of the post"
                  },
                  "image_url": {
                    "type": "string",
                    "description": "URL of an image associated with the post"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "post updated successfully"
          },
          "400": {
            "description": "key is not valid"
          },
          "404": {
            "description": "post not found"
          }
        }
      },
      "delete": {
        "summary": "delete a post",
        "description": "get a post by id and delete it",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "post deleted successfully"
          },
          "404": {
            "description": "post not found"
          }
        }
      }
    },
    "/api/posts/all": {
      "get": {
        "summary": "return a list of all posts",
        "description": "get all blog posts",
        "responses": {
          "200": {
            "description": "successfull response"
          }
        }
      }
    },
    "/api/posts/user/{user_id}": {
      "get": {
        "summary": "all user by a particular user",
        "description": "get every post a user has",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "404": {
            "description": "user not found"
          }
        }
      }
    },
    "/api/posts/myposts": {
      "get": {
        "summary": "all posts by the current user",
        "description": "returns a list of all my posts",
        "responses": {
          "200": {
            "description": "successfull response"
          }
        }
      }
    },
    "/api/posts/{post_id}/comments": {
      "get": {
        "summary": "get a comment on a particular post",
        "description": "get all comments on a post",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      },
      "post": {
        "summary": "make a comment on a post",
        "description": "create a comment on a particular post",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "The content of the post"
                  },
                  "image_url": {
                    "type": "string",
                    "description": "URL of an image associated with the post"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "a comment must have a text"
          }
        }
      }
    },
    "/api/comments/{comment_id}": {
      "get": {
        "summary": "get a particular comment by id",
        "description": "return a particular comment",
        "parameters": [
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "404": {
            "description": "comment not found"
          }
        }
      },
      "patch": {
        "summary": "Update a comment by ID",
        "description": "Update a comment by ID",
        "parameters": [
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "The updated comment text"
                  },
                  "image": {
                    "type": "string",
                    "description": "URL of an updated image associated with the comment"
                  }
                },
                "example": {
                  "text": "Updated comment text",
                  "image": "https://example.com/updated_image.jpg"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment updated successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "You are not allowed to change a key"
          },
          "404": {
            "description": "Comment not found"
          }
        }
      },
      "delete": {
        "summary": "delete a comment by id",
        "description": "geta comment by id and delete it",
        "parameters": [
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "404": {
            "description": "comment not found"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "schemas": {
    "Basemodel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the model"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of when the model was created"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of when the model was last updated"
        },
        "formatted_created_at": {
          "type": "string",
          "description": "Formatted created timestamp"
        },
        "formatted_updated_at": {
          "type": "string",
          "description": "Formatted updated timestamp"
        }
      }
    },
    "Comment": {
      "type": "object",
      "allOf": [
        {
          "$ref": null
        },
        {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "User ID who made the comment"
            },
            "post_id": {
              "type": "string",
              "description": "ID of the post associated with the comment"
            },
            "text": {
              "type": "string",
              "description": "Comment text"
            },
            "image_url": {
              "type": "string",
              "description": "URL of an image associated with the comment"
            }
          }
        }
      ]
    },
    "Post": {
      "type": "object",
      "allOf": [
        {
          "$ref": null
        },
        {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "User ID who made the post"
            },
            "body": {
              "type": "string",
              "description": "Post content"
            },
            "image_url": {
              "type": "string",
              "description": "URL of an image associated with the post"
            }
          }
        }
      ]
    },
    "User": {
      "type": "object",
      "allOf": [
        {
          "$ref": null
        },
        {
          "type": "object",
          "properties": {
            "account_id": {
              "type": "string",
              "description": "User's account ID"
            },
            "name": {
              "type": "string",
              "description": "User's name"
            },
            "email": {
              "type": "string",
              "description": "User's email address"
            },
            "avatar": {
              "type": "string",
              "description": "URL of the user's avatar image"
            },
            "token": {
              "type": "string",
              "description": "User's authentication token"
            }
          }
        }
      ]
    }
  }
}